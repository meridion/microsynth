
Microsynth is a minimal command-line driven synthesizer.

It currently supports variables, delayed signals, infinite impuls response and
stereo.  Any sound you make is built on the signal generated by basic
oscillators such as: sin, cos, square, saw, rsaw, triangle, etc.

to compile microsynth you should have glib version 2.26 or something similar installed.
You will also need ALSA.

To compile simply type: "make" in microsynth's project root.

microsynth does not yet come with autotools, so to install, (if you ever wanted
to do that ;-) you will have to copy the microsynth binary to "/usr/bin".

A typical session will look like:
$ ./microsynth 
synthread: started
synthread: Detected samplerate of 48000
synthread: Selected buffersize of 2048
synthread: Response delay is approximately 42.67 ms
synthread: Selected period size of 1024
synthread: Audio system configured.
microsynth v0.1.1-devel
msynth> in = 0
msynth> filter = 0
msynth> filter = in + in[1] - filter[0] 
msynth> in = square(50)
msynth> filter
msynth> in = 0
msynth> square(50)
msynth> 0

An expression not assigned to a variable will be asigned to the synthesizer's
output signal, and thus be audible.

microsynth also has 2 special variables: "left" and "right" which can be used to
output in stereo.

The complete set of current expression functions is:
    Oscillators:
    sin(freq)       - Sinoid wave
    cos(freq)       - Cosine
    saw(freq)       - Sawtooth wave
    rsaw(freq)      - Reverse sawtooth wave
    triangle(freq)  - Triangle wave
    pulse(freq)     - freq pulses per second
        1 when pulsing, 0 otherwise
    square(freq)    - Square wave
    whitenoise()    - White noise
        Output between -1 and 1

    Mathematical transformations:
    chipify(signal) - Transform input signal to 8-bit
        Input signal must range from -1 to 1 (will be clipped when not in
        range). Will then be rounded to nearest 8-bit approximation in this
        range.
    add(a, b)   - Add input signals
    sub(a, b)   - Subtract input signals
    mul(a, b)   - Multiply input signals
    div(a, b)   - Divide input signals
        Dividing by 0 yields 0 for synthesizer operational convenience.
    min(a, b)   - Return minimal signal
    max(a, b)   - Return maximal signal
    abs(in)     - Return absolute input signal
    clamp(a, b) - Return smallest absolute input signal
    floor(in)   - Floor of input signal
    ceil(in)    - Ceil of input signal

Finally microsynth has 2 special commands:
    volume:
        Without any arguments volume will print the current volume in percents.
        With a single arguments, volume will change the volume to the given
        percentage. 
        The volume command does not change ALSA's PCM level, but merely changes
        microsynth's softvolume.

    quit:
        Farely simple, quit the synthesizer.

